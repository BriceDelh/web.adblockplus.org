{
  "title": {
    "message": "Coding Style"
  },
  "s1": {
    "message": "Precedence"
  },
  "s2": {
    "message": "The Adblock Plus coding style is based on others. Our rules (both general and language specific) always overrule referenced style guides. The language specific sections overrule the general section."
  },
  "s3": {
    "message": "Consistency"
  },
  "s4": {
    "message": "Consistency is most important: Be consistent within functions, files, modules and projects. Making existing code conform with this style guide is fine, but it should happen in dedicated commits, preferably for a whole module or project at once."
  },
  "s5": {
    "message": "General"
  },
  "s6": {
    "message": "Follow the Mozilla Coding Style's <a>general practices</a> and its <a>naming and formatting rules</a>."
  },
  "s7": {
    "message": "Use 2 spaces per indentation level."
  },
  "s8": {
    "message": "All files should have a <a>license header</a>, but no mode line comments."
  },
  "s9": {
    "message": "Newline at end of file, otherwise no trailing whitespace."
  },
  "s10": {
    "message": "Lines can be longer than the limit, if limiting line length would hurt readability in a particular case."
  },
  "s11": {
    "message": "Opening braces always go on their own line."
  },
  "s12": {
    "message": "No hungarian notation, no special variable name prefixes or suffixes denoting type or scope. All variable names start with a lower case letter."
  },
  "s13": {
    "message": "Don't comment code out, delete it."
  },
  "s14": {
    "message": "JavaScript"
  },
  "s15": {
    "message": "Follow the Mozilla Coding Style's <a>JavaScript practices</a>."
  },
  "s16": {
    "message": "Opening braces of object literals in don't go on their own line when that would cause a syntax error."
  },
  "s17": {
    "message": "Use"
  },
  "s18": {
    "message": "bind()"
  },
  "s19": {
    "message": "to ensure the desired value of the"
  },
  "s20": {
    "message": "this"
  },
  "s21": {
    "message": "variable, donâ€™t use temporary variables as a replacement."
  },
  "s22": {
    "message": "In classes, prefix private functions with a single underscore to make them pseudo-private."
  },
  "s23": {
    "message": "Python"
  },
  "s24": {
    "message": "Follow the Mozilla Coding Style's <a>Python practices</a>."
  },
  "s25": {
    "message": "In modules, prefix private functions and variables with a single underscore."
  },
  "s26": {
    "message": "Java"
  },
  "s27": {
    "message": "Follow the Mozilla Coding Style's <a>Java practices</a>."
  },
  "s28": {
    "message": "Imports should be organised consistently per file, we don't use global rules."
  },
  "s29": {
    "message": "C++"
  },
  "s30": {
    "message": "Follow the Mozilla Coding Style's <a>C++ practices</a>."
  },
  "s31": {
    "message": "Indent namespace bodies."
  },
  "s32": {
    "message": "Avoid manual memory management: Use references and values when possible, smart pointers when necessary, raw pointers only for weak references."
  },
  "s33": {
    "message": "Don't use C-style casts unless its exact semantics are required."
  },
  "s34": {
    "message": "We tend to use anonymous namespaces instead of static."
  },
  "s35": {
    "message": "Puppet"
  },
  "s36": {
    "message": "Follow the <a>Puppet Style Guide</a>."
  },
  "s37": {
    "message": "Opening braces don't go on their own line."
  }
}